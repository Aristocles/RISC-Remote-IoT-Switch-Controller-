// - See more at: http://www.esp8266.com/viewtopic.php?f=29&t=8746#sthash.W5Ha5DRg.dpuf
/*

 It connects to an MQTT server then:
  - on 0 switches off relay
  - on 1 switches on relay
  - on 2 switches the state of the relay

  - sends 0 on off relay
  - sends 1 on on relay

 It will reconnect to the server if the connection is lost using a blocking
 reconnect function. See the 'mqtt_reconnect_nonblocking' example for how to
 achieve the same result without blocking the main loop.

 The current state is stored in EEPROM and restored on bootup

*/

/*
 * Original code taken from http://www.esp8266.com/viewtopic.php?f=29&t=8746 on 19/Jan/2017
 * Code has been modified to suit my needs. 
 *
 */

#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Bounce2.h>
#include <EEPROM.h>


const char* ssid = "<INSERT_SSID_HERE>";
const char* password = "<INSERT_PASSWORD_HERE>";
const char* mqtt_server = "192.168.0.1";
const char* mqtt_name = "FairyLightSW"; // no funky chars or spaces
const char* mqtt_user = "<MQTT_USER>";
const char* mqtt_pass = "<MQTT_PASSWORD>";

WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;
char msg[50];
int value = 0;

const char* outTopic = "home/outside/frontfairylights/state";
const char* inTopic = "home/outside/frontfairylights/cmd";
const char* inPushTopic = "home/outside/frontfairlights/push"; // momentary pushbutton used for pressing 'mode' button
const char* outPushTopic = "home/outside/frontfairlights/push_state";

int relay_pin = 12; // Pin D6 on NodeMCU
int button_pin = 0; // Built in button on NodeMCU
int pushbutt_pin = 14; // Pin D5 on NodeMCU
bool relayState = LOW;

// Instantiate a Bounce object :
Bounce debouncer = Bounce(); 

void extButton() {
  debouncer.update();
   
   // Call code if Bounce fell (transition from HIGH to LOW) :
   if ( debouncer.fell() ) {
     Serial.print("Debouncer fell: ");
     // Toggle relay state :
     relayState = !relayState;
     digitalWrite(relay_pin,relayState);
     EEPROM.write(0, relayState);    // Write state to EEPROM
     if (relayState == 0){ // When LOW the relay is ON... weird, I know
      Serial.println("button state is 1");
      client.publish(outTopic, "1", true); // 'true' at the end is to enable MQTT `retain` feature
     }
     else if (relayState == 1){ // When HIGH the relay is OFF... weird, I know
      Serial.println("button state is 0");
      client.publish(outTopic, "0", true);
     }
   }
}

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  //WiFi.begin(ssid, password);
  if (WiFi.status() != WL_CONNECTED) { // connect to WiFi using this way because of a bug detailed here:
    WiFi.begin(ssid, password); // https://github.com/esp8266/Arduino/issues/2186
  }

  while (WiFi.status() != WL_CONNECTED) {
    extButton();
    for(int i = 0; i<500; i++){
      extButton();
      delay(1);
    }
    Serial.print(".");
  }
  digitalWrite(13, LOW);
  delay(500);
  digitalWrite(13, HIGH);
  delay(500);
  digitalWrite(13, LOW);
  delay(500);
  digitalWrite(13, HIGH);
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  String compare = String(topic); // convert char array to string for comparison
  if (compare.equalsIgnoreCase("home/outside/frontfairylights/cmd")) {
    // Switch on the LED if an 0 was received as first character
    if ((char)payload[0] == '0') { // When relay gets LOW it is ON... weird, I know
      digitalWrite(relay_pin, HIGH);   // Turn the LED on (Note that LOW is the voltage level
      client.publish(outTopic, "0", true); // 'true' at the end is to enable MQTT `retain` feature
      Serial.println("relay_pin -> HIGH");
      relayState = HIGH;
      EEPROM.write(0, relayState);    // Write state to EEPROM
      EEPROM.commit();
    } else if ((char)payload[0] == '1') { // When relay is HIGH it is OFF... weird, I know
      digitalWrite(relay_pin, LOW);  // Turn the LED off by making the voltage HIGH
      client.publish(outTopic, "1", true);
      Serial.println("relay_pin -> LOW");
      relayState = LOW;
      EEPROM.write(0, relayState);    // Write state to EEPROM
      EEPROM.commit();
    } else if ((char)payload[0] == '2') {
      relayState = !relayState;
      digitalWrite(relay_pin, relayState);  // Turn the LED off by making the voltage HIGH
      Serial.print("relay_pin -> switched to ");
      Serial.println(relayState); 
      EEPROM.write(0, relayState);    // Write state to EEPROM
      EEPROM.commit();
    }
  } else if (compare.equalsIgnoreCase("home/outside/frontfairlights/push")) {
    Serial.println("pushbutt_pin pushed");
    client.publish(outPushTopic, "OFF", true);
    digitalWrite(pushbutt_pin, LOW);
    delay(500);
    digitalWrite(pushbutt_pin, HIGH);
    Serial.println("pushbutt_pin released");
  } else {
    Serial.println("Unknown MQTT topic. Ignoring.");
  }

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect(mqtt_name, mqtt_user, mqtt_pass)) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish(outTopic, "Sonoff1 booted - outTopic");
      client.publish(outPushTopic, "Sonoff1 booted - outPushTopic");
      // ... and resubscribe
      client.subscribe(inTopic);
      client.subscribe(inPushTopic);
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      for(int i = 0; i<5000; i++){
        extButton();
        delay(1);
      }
    }
  }
}



void setup() {
  EEPROM.begin(512);              // Begin eeprom to store on/off state
  pinMode(relay_pin, OUTPUT);     // Initialize the relay pin as an output
  pinMode(pushbutt_pin, OUTPUT);   // Initialise the pushbutton pin as an output.
  // This is used for 'mode' button operation and is a momentary button
  pinMode(button_pin, INPUT);     // Initialize the button pin as an input
  pinMode(13, OUTPUT);
  relayState = EEPROM.read(0);
  digitalWrite(relay_pin, relayState);
  digitalWrite(pushbutt_pin, HIGH);
  
  debouncer.attach(button_pin);   // Use the bounce2 library to debounce the built in button
  debouncer.interval(50);         // Input must be low for 50 ms
  
  digitalWrite(13, LOW);          // Blink to indicate setup
  delay(500);
  digitalWrite(13, HIGH);
  delay(500);
  
  Serial.begin(115200);
  setup_wifi();                   // Connect to wifi 
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  extButton();
}

